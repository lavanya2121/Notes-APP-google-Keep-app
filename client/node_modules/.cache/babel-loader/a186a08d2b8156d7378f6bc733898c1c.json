{"ast":null,"code":"import axios from '../config/axios';\nimport Swal from 'sweetalert2'; //listing categories\n//synchronous-->synhronous action generators are used to put the data we got from the server in our asyn action generators to the store\n\nexport var setCategories = function setCategories(categories) {\n  return {\n    type: 'SET_CATEGORIES',\n    payload: categories\n  };\n}; //asynchronous->asynchronous action creators helps to get the data from the server\n//to get all the data from the store\n\nexport var startSetCategories = function startSetCategories() {\n  return function (dispatch) {\n    axios.get('/categories', {\n      headers: {\n        'x-auth': localStorage.getItem('authToken') //to get the categories data from the server we need to send the token infor to the server\n\n      }\n    }).then(function (response) {\n      console.log('categories response from the server', response.data); //the data what we get from the server we need to dispatch it to our store\n\n      var categories = response.data; // dont paste this here you will not get the response\n      // Swal.fire({\n      //     title: 'Success!',\n      //     text: 'You have successfully added the category',\n      //     icon: 'success',\n      //     confirmButtonText: 'Ok'\n      // })\n\n      dispatch(setCategories(categories));\n      Swal.fire({\n        title: 'Success!',\n        text: 'You have successfully added the category',\n        icon: 'success',\n        confirmButtonText: 'Ok'\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n}; // -------------------------------------------------------------------------------\n//adding categories\n//synchronous->to add the categories into  the redux store\n\nexport var addCategory = function addCategory(category) {\n  return {\n    type: 'ADD_CATEGORIES',\n    payload: category\n  };\n}; //asynchronous->to add the categories into the db in the server\n\nexport var startAddCategory = function startAddCategory(formData, redirect) {\n  return function (dispatch) {\n    axios.post('/categories', formData, {\n      headers: {\n        'x-auth': localStorage.getItem('authToken')\n      }\n    }).then(function (response) {\n      console.log('add category response from the server', response.data); // const category=response.data\n      // dispatch(addCategory(category))\n\n      dispatch(startSetCategories());\n      redirect();\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n}; // ----------------------------------------------------------------------------------\n//Removing Categories\n//synchronous->to remove the categories from the store\n\nexport var removeCategory = function removeCategory(id) {\n  return {\n    type: 'REMOVE_CATEGORIES',\n    payload: id\n  };\n}; //asynchrounous-->to remove the categories from the db in the server\n\nexport var startRemoveCategory = function startRemoveCategory(id) {\n  return function (dispatch) {\n    axios.delete(\"/categories/\".concat(id), {\n      headers: {\n        'x-auth': localStorage.getItem('authToken')\n      }\n    }).then(function (response) {\n      console.log('remove category response from the server', response.data);\n      var category = response.data;\n      dispatch(removeCategory(category._id)); // Swal.fire({\n      //     title: 'Success!',\n      //     text: 'You have successfully removed/deleted the category',\n      //     icon: 'success',\n      //     confirmButtonText: 'Ok'\n      // })\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n}; // ------------------------------------------------------------------------------------------\n// updating/editing categories\n//asynchrounos means server related operations\n//synchrounous means store related operations\n//synchronous->to update the categories in the redux store\n\nexport var updateCategory = function updateCategory(category) {\n  return {\n    type: 'UPDATE_CATEGORIES',\n    payload: category\n  };\n}; //asynchronous->to update the categories in the db in the server\n\nexport var startUpdateCategory = function startUpdateCategory(formData, id, redirect) {\n  return function (dispatch) {\n    axios.put(\"/categories/\".concat(id), formData, {\n      headers: {\n        'x-auth': localStorage.getItem('authToken')\n      }\n    }).then(function (response) {\n      console.log('editing category response from the server', response.data);\n      var category = response.data;\n      dispatch(updateCategory(category));\n      Swal.fire({\n        title: 'Success!',\n        text: 'You have successfully updated the category',\n        icon: 'success',\n        confirmButtonText: 'Ok'\n      });\n      redirect();\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["E:/LAVANYA-DCT-FINAL-PROJECTS21/new-updated_notesapp-master/client/src/actions/categoriesAction.js"],"names":["axios","Swal","setCategories","categories","type","payload","startSetCategories","dispatch","get","headers","localStorage","getItem","then","response","console","log","data","fire","title","text","icon","confirmButtonText","catch","err","addCategory","category","startAddCategory","formData","redirect","post","removeCategory","id","startRemoveCategory","delete","_id","updateCategory","startUpdateCategory","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAC,SAAdA,aAAc,CAACC,UAAD,EAAc;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAC,gBADF;AAEHC,IAAAA,OAAO,EAACF;AAFL,GAAP;AAIH,CALM,C,CAOP;AACA;;AACA,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACnC,SAAM,UAACC,QAAD,EAAY;AACfP,IAAAA,KAAK,CAACQ,GAAN,CAAU,aAAV,EAAwB;AACpBC,MAAAA,OAAO,EAAG;AACN,kBAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CADL,CACsC;;AADtC;AADU,KAAxB,EAKCC,IALD,CAKM,UAACC,QAAD,EAAY;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAkDF,QAAQ,CAACG,IAA3D,EADc,CACkD;;AAChE,UAAMb,UAAU,GAACU,QAAQ,CAACG,IAA1B,CAFc,CAGd;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,MAAAA,QAAQ,CAACL,aAAa,CAACC,UAAD,CAAd,CAAR;AACIF,MAAAA,IAAI,CAACgB,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAE,UADD;AAENC,QAAAA,IAAI,EAAE,0CAFA;AAGNC,QAAAA,IAAI,EAAE,SAHA;AAINC,QAAAA,iBAAiB,EAAE;AAJb,OAAV;AAMP,KAtBD,EAuBCC,KAvBD,CAuBO,UAACC,GAAD,EAAO;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH,KAzBD;AA0BH,GA3BA;AA4BJ,CA7BM,C,CA8BP;AACA;AAEA;;AACA,OAAO,IAAMC,WAAW,GAAC,SAAZA,WAAY,CAACC,QAAD,EAAY;AACjC,SAAO;AACHrB,IAAAA,IAAI,EAAC,gBADF;AAEHC,IAAAA,OAAO,EAACoB;AAFL,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,IAAMC,gBAAgB,GAAC,SAAjBA,gBAAiB,CAACC,QAAD,EAAUC,QAAV,EAAqB;AACnD,SAAM,UAACrB,QAAD,EAAY;AACdP,IAAAA,KAAK,CAAC6B,IAAN,CAAW,aAAX,EAAyBF,QAAzB,EAAkC;AAC9BlB,MAAAA,OAAO,EAAG;AACN,kBAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB;AADL;AADoB,KAAlC,EAKCC,IALD,CAKM,UAACC,QAAD,EAAY;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAoDF,QAAQ,CAACG,IAA7D,EADc,CAEd;AACA;;AAEAT,MAAAA,QAAQ,CAACD,kBAAkB,EAAnB,CAAR;AACAsB,MAAAA,QAAQ;AACX,KAZD,EAaCN,KAbD,CAaO,UAACC,GAAD,EAAO;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH,KAfD;AAgBH,GAjBD;AAkBC,CAnBM,C,CAoBP;AACA;AAEA;;AACA,OAAO,IAAMO,cAAc,GAAC,SAAfA,cAAe,CAACC,EAAD,EAAM;AAC1B,SAAO;AACH3B,IAAAA,IAAI,EAAC,mBADF;AAEHC,IAAAA,OAAO,EAAC0B;AAFL,GAAP;AAIP,CALM,C,CAMP;;AACA,OAAO,IAAMC,mBAAmB,GAAC,SAApBA,mBAAoB,CAACD,EAAD,EAAM;AAC/B,SAAM,UAACxB,QAAD,EAAY;AACdP,IAAAA,KAAK,CAACiC,MAAN,uBAA4BF,EAA5B,GAAiC;AAC7BtB,MAAAA,OAAO,EAAG;AACN,kBAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB;AADL;AADmB,KAAjC,EAKCC,IALD,CAKM,UAACC,QAAD,EAAY;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAuDF,QAAQ,CAACG,IAAhE;AACA,UAAMS,QAAQ,GAACZ,QAAQ,CAACG,IAAxB;AACAT,MAAAA,QAAQ,CAACuB,cAAc,CAACL,QAAQ,CAACS,GAAV,CAAf,CAAR,CAHc,CAId;AACA;AACA;AACA;AACA;AACA;AACH,KAfD,EAgBCZ,KAhBD,CAgBO,UAACC,GAAD,EAAO;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH,KAlBD;AAmBH,GApBD;AAqBH,CAtBE,C,CAwBP;AACA;AAEA;AACA;AAEA;;AACA,OAAO,IAAMY,cAAc,GAAC,SAAfA,cAAe,CAACV,QAAD,EAAY;AACpC,SAAQ;AACJrB,IAAAA,IAAI,EAAC,mBADD;AAEJC,IAAAA,OAAO,EAACoB;AAFJ,GAAR;AAIH,CALM,C,CAOP;;AACA,OAAO,IAAMW,mBAAmB,GAAC,SAApBA,mBAAoB,CAACT,QAAD,EAAUI,EAAV,EAAaH,QAAb,EAAwB;AACrD,SAAM,UAACrB,QAAD,EAAY;AACdP,IAAAA,KAAK,CAACqC,GAAN,uBAAyBN,EAAzB,GAA8BJ,QAA9B,EAAuC;AACnClB,MAAAA,OAAO,EAAG;AACN,kBAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB;AADL;AADyB,KAAvC,EAKCC,IALD,CAKM,UAACC,QAAD,EAAY;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAwDF,QAAQ,CAACG,IAAjE;AACC,UAAMS,QAAQ,GAACZ,QAAQ,CAACG,IAAxB;AACAT,MAAAA,QAAQ,CAAC4B,cAAc,CAACV,QAAD,CAAf,CAAR;AACAxB,MAAAA,IAAI,CAACgB,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAE,UADD;AAENC,QAAAA,IAAI,EAAE,4CAFA;AAGNC,QAAAA,IAAI,EAAE,SAHA;AAINC,QAAAA,iBAAiB,EAAE;AAJb,OAAV;AAMAO,MAAAA,QAAQ;AACX,KAhBD,EAiBCN,KAjBD,CAiBO,UAACC,GAAD,EAAO;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH,KAnBD;AAoBH,GArBD;AAsBH,CAvBM","sourcesContent":["import axios from '../config/axios'\nimport Swal from 'sweetalert2';\n\n//listing categories\n//synchronous-->synhronous action generators are used to put the data we got from the server in our asyn action generators to the store\nexport const setCategories=(categories)=>{\n    return {\n        type:'SET_CATEGORIES',\n        payload:categories\n    }\n}\n\n//asynchronous->asynchronous action creators helps to get the data from the server\n//to get all the data from the store\nexport const startSetCategories = () => {\n     return(dispatch)=>{\n        axios.get('/categories',{\n            headers : {\n                'x-auth' : localStorage.getItem('authToken')//to get the categories data from the server we need to send the token infor to the server\n            }\n        })\n        .then((response)=>{\n            console.log('categories response from the server',response.data)//the data what we get from the server we need to dispatch it to our store\n            const categories=response.data\n            // dont paste this here you will not get the response\n            // Swal.fire({\n            //     title: 'Success!',\n            //     text: 'You have successfully added the category',\n            //     icon: 'success',\n            //     confirmButtonText: 'Ok'\n            // })\n            dispatch(setCategories(categories))\n                Swal.fire({\n                    title: 'Success!',\n                    text: 'You have successfully added the category',\n                    icon: 'success',\n                    confirmButtonText: 'Ok'\n                })\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n}\n// -------------------------------------------------------------------------------\n//adding categories\n\n//synchronous->to add the categories into  the redux store\nexport const addCategory=(category)=>{\n    return {\n        type:'ADD_CATEGORIES',\n        payload:category\n    }\n}\n\n//asynchronous->to add the categories into the db in the server\nexport const startAddCategory=(formData,redirect)=>{\nreturn(dispatch)=>{\n    axios.post('/categories',formData,{\n        headers : {\n            'x-auth' : localStorage.getItem('authToken')\n        }\n    })\n    .then((response)=>{\n        console.log('add category response from the server',response.data)\n        // const category=response.data\n        // dispatch(addCategory(category))\n     \n        dispatch(startSetCategories())\n        redirect()\n    })\n    .catch((err)=>{\n        console.log(err)\n    })\n}\n}\n// ----------------------------------------------------------------------------------\n//Removing Categories\n\n//synchronous->to remove the categories from the store\nexport const removeCategory=(id)=>{\n        return {\n            type:'REMOVE_CATEGORIES',\n            payload:id\n        }\n}\n//asynchrounous-->to remove the categories from the db in the server\nexport const startRemoveCategory=(id)=>{\n        return(dispatch)=>{\n            axios.delete(`/categories/${id}`,{\n                headers : {\n                    'x-auth' : localStorage.getItem('authToken')\n                }\n            })\n            .then((response)=>{\n                console.log('remove category response from the server',response.data)\n                const category=response.data\n                dispatch(removeCategory(category._id))\n                // Swal.fire({\n                //     title: 'Success!',\n                //     text: 'You have successfully removed/deleted the category',\n                //     icon: 'success',\n                //     confirmButtonText: 'Ok'\n                // })\n            })\n            .catch((err)=>{\n                console.log(err)\n            })\n        }\n    }\n    \n// ------------------------------------------------------------------------------------------\n// updating/editing categories\n\n//asynchrounos means server related operations\n//synchrounous means store related operations\n\n//synchronous->to update the categories in the redux store\nexport const updateCategory=(category)=>{\n    return  {\n        type:'UPDATE_CATEGORIES',\n        payload:category\n    }\n}\n\n//asynchronous->to update the categories in the db in the server\nexport const startUpdateCategory=(formData,id,redirect)=>{\n    return(dispatch)=>{\n        axios.put(`/categories/${id}`,formData,{\n            headers : {\n                'x-auth' : localStorage.getItem('authToken')\n            }\n        })\n        .then((response)=>{\n           console.log('editing category response from the server',response.data)\n            const category=response.data\n            dispatch(updateCategory(category))\n            Swal.fire({\n                title: 'Success!',\n                text: 'You have successfully updated the category',\n                icon: 'success',\n                confirmButtonText: 'Ok'\n            })\n            redirect()\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}