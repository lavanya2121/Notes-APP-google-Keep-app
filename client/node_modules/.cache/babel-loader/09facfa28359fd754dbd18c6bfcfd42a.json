{"ast":null,"code":"import axios from '../config/axios';\nimport swal from 'sweetalert'; //register\n\nexport var startRegister = function startRegister(formData, redirect) {\n  return function (dispatch) {\n    axios.post('/users/register', formData).then(function (response) {\n      if (response.data.hasOwnProperty('errors')) {\n        //alert(response.data.message)\n        swal(\"\".concat(response.data.message), \"\", \"error\");\n      } else {\n        //console.log('register response from the server',response.data)\n        swal(\"Successfully Registered\", \"\", \"success\");\n        console.log('register response from the server', response.data);\n        redirect();\n      }\n    });\n  };\n}; //synchrounous--setUser() is for both login n account\n\nexport var setUser = function setUser(user) {\n  return {\n    type: 'SET_USER',\n    payload: user\n  };\n}; // // ------------------------------------------------------------------\n//account\n\nexport var startSetUser = function startSetUser() {\n  return function (dispatch) {\n    axios.get('/users/account', {\n      headers: {\n        'x-auth': localStorage.getItem('authToken')\n      }\n    }).then(function (response) {\n      console.log(\"account response from the server\", response.data);\n      var user = response.data;\n      dispatch(setUser(user));\n    });\n  };\n}; //login\n\nexport var startLogin = function startLogin(formData, redirect) {\n  return function (dispatch) {\n    axios.post('/users/login', formData).then(function (response) {\n      if (response.data.hasOwnProperty('error')) {\n        swal(\"\".concat(response.data.error), \"\", \"error\");\n      } else {\n        console.log(\"account\", response.data.token);\n\n        if (response.data.token) {\n          localStorage.setItem('authToken', response.data.token);\n          axios.get('/users/account', {\n            headers: {\n              'x-auth': localStorage.getItem('authToken')\n            }\n          }).then(function (response) {\n            var user = response.data;\n            console.log(\"login response from the server\", user); //now we are setting the user obj inside the redux store\n\n            dispatch(setUser(user));\n            redirect();\n          });\n        } else {\n          swal('invalid email/password ', \"\", \"error\");\n        }\n      }\n    });\n  };\n}; //logout\n\nexport var removeUser = function removeUser() {\n  return {\n    type: 'REMOVE_USER'\n  };\n};\nexport var startLogout = function startLogout() {\n  return function (dispatch) {\n    axios.delete('/users/logout', {\n      headers: {\n        'x-auth': localStorage.getItem('authToken')\n      }\n    }).then(function (response) {\n      console.log(\"logout response from the server\", response.data);\n\n      if (response.data.notice) {\n        console.log(\"authremove/userremove\");\n        localStorage.removeItem('authToken');\n        dispatch(removeUser());\n        window.location.href = \"/users/login\"; //to go to the root of your page-->redirecting\n        //here we cannot do history.push becoz browserrouter is inside your app component in app.js n withrouter also does not wrk\n      }\n    });\n  };\n}; // --------------------------------------------------\n//from actions we will be doing our api call so we need axios,since the baseUrl remains the same we need to configure the baseurl inside config folder\n// import axios from 'axios'\n// export const startRegister=(formData,redirect)=>{\n//     //since we are using redux thunk startRegister method returns a callback function for which we have access to our dispatch() method\n//     return(dispatch)=>{\n//         //baseurl(localhost:3050)+/users/register))\n//         //post method we send the formdata as the 2nd arguement\n//         axios.post('/users/register',formData)\n//              .then((response)=>{//success\n//                 console.log('user post response from the server',response.data)\n//                 //inside our register component we need to invoke this\n//                 if(response.data.hasOwnProperty('errors')){\n//                     alert(response.data.message)//this response we get it from the server\n//                 }else{\n//                     //from our action generators we need to programatically redirect to the login page\n//                     redirect()//invoke the redirect() function\n//                 }\n//              })\n//     }\n// }","map":{"version":3,"sources":["E:/LAVANYA-DCT-FINAL-PROJECTS21/new-updated_notesapp-master/client/src/actions/userAction.js"],"names":["axios","swal","startRegister","formData","redirect","dispatch","post","then","response","data","hasOwnProperty","message","console","log","setUser","user","type","payload","startSetUser","get","headers","localStorage","getItem","startLogin","error","token","setItem","removeUser","startLogout","delete","notice","removeItem","window","location","href"],"mappings":"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","sourcesContent":["\nimport axios from '../config/axios'\nimport swal from 'sweetalert'\n\n//register\nexport const startRegister=(formData,redirect)=>{\n    return (dispatch)=>{\n        axios.post('/users/register',formData)\n        .then((response)=>{\n            if(response.data.hasOwnProperty('errors')){\n                //alert(response.data.message)\n                swal(`${response.data.message}`, \"\",\"error\")\n            }else{\n                //console.log('register response from the server',response.data)\n                swal(\"Successfully Registered\",\"\",\"success\")\n                console.log('register response from the server',response.data)\n                redirect()\n            }\n        })\n    }\n\n}\n\n\n //synchrounous--setUser() is for both login n account\nexport const setUser=(user)=>{\n    return { \n            type:'SET_USER', \n            payload:user\n           }\n}\n\n// // ------------------------------------------------------------------\n\n//account\nexport const startSetUser=()=>{\n    return (dispatch)=>{\n        axios.get('/users/account',{\n            headers:{\n                'x-auth':localStorage.getItem('authToken')\n            }\n        })\n        .then((response)=>{\n            console.log(\"account response from the server\",response.data)\n            \n            const user=response.data\n            dispatch(setUser(user))\n        })\n\n    }\n    \n}\n\n\n//login\nexport const startLogin = (formData,redirect) => {\n    return (dispatch) => {\n        axios.post('/users/login',formData)\n        .then(response => {\n            if(response.data.hasOwnProperty('error')){\n                swal(`${response.data.error}`,\"\",\"error\")\n            } else {\n                console.log(\"account\",response.data.token)\n                if(response.data.token) {\n                    localStorage.setItem('authToken',response.data.token)\n                axios.get('/users/account',{\n                    headers : {\n                        'x-auth' : localStorage.getItem('authToken')\n                    }\n                })\n                .then((response) => {\n                    const user = response.data\n                    console.log(\"login response from the server\",user)\n                    //now we are setting the user obj inside the redux store\n                    dispatch(setUser(user))\n                    redirect()\n                })\n                } else {\n                    swal('invalid email/password ',\"\",\"error\")\n                }\n                \n            }\n        })\n    }\n\n}\n\n//logout\nexport const removeUser=()=>{\n    return {\n        type:'REMOVE_USER'\n    }\n}\n\nexport const startLogout=()=>{\n    return (dispatch)=>{\n        axios.delete('/users/logout',{\n            headers:{\n                'x-auth':localStorage.getItem('authToken')\n            }\n        })\n        .then((response)=>{\n            console.log(\"logout response from the server\",response.data)\n            if(response.data.notice){\n                console.log(\"authremove/userremove\")\n                localStorage.removeItem('authToken')\n                dispatch(removeUser())\n                window.location.href=\"/users/login\"//to go to the root of your page-->redirecting\n                //here we cannot do history.push becoz browserrouter is inside your app component in app.js n withrouter also does not wrk\n            }\n        })\n    }\n}\n// --------------------------------------------------\n\n//from actions we will be doing our api call so we need axios,since the baseUrl remains the same we need to configure the baseurl inside config folder\n// import axios from 'axios'\n\n// export const startRegister=(formData,redirect)=>{\n//     //since we are using redux thunk startRegister method returns a callback function for which we have access to our dispatch() method\n//     return(dispatch)=>{\n//         //baseurl(localhost:3050)+/users/register))\n//         //post method we send the formdata as the 2nd arguement\n//         axios.post('/users/register',formData)\n//              .then((response)=>{//success\n//                 console.log('user post response from the server',response.data)\n//                 //inside our register component we need to invoke this\n//                 if(response.data.hasOwnProperty('errors')){\n//                     alert(response.data.message)//this response we get it from the server\n//                 }else{\n//                     //from our action generators we need to programatically redirect to the login page\n//                     redirect()//invoke the redirect() function\n//                 }\n\n//              })\n\n//     }\n\n// }"]},"metadata":{},"sourceType":"module"}