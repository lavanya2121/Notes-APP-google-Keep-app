{"ast":null,"code":"var _jsxFileName = \"E:\\\\LAVANYA-DCT-FINAL-PROJECTS21\\\\new-updated_notesapp-master\\\\client\\\\src\\\\index.js\";\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import App from './App'\n// import {Provider} from 'react-redux'\n// import configureStore from './store/configureStore'\n// import {startSetNotes} from './actions/notesAction'\n// import {startSetCategories} from './actions/categoriesAction'\n// import { startSetUser } from './actions/userAction'\n// const store=configureStore()\n// console.log(store.getState())\n// store.subscribe(() => {\n// console.log(store.getState())\n// })\n// if(localStorage.getItem('authToken')){\n// store.dispatch(startSetUser())\n// store.dispatch(startSetNotes())\n// store.dispatch(startSetCategories())\n// }\n// const jsx=(<Provider store={store}>\n//     <App/>\n//     </Provider>\n// )\n// ReactDOM.render(jsx, document.getElementById('root'))\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport { startSetUser } from './actions/userAction';\nimport { startSetCategories } from './actions/categoriesAction';\nimport { startSetNotes } from './actions/notesAction'; //calling or invoking configureStore() function\n\nvar store = configureStore(); //to see the initial value of our store we do this\n\nconsole.log(store.getState()); //subscribe method\n\nstore.subscribe(function () {\n  console.log(store.getState()); //now we have the paricular state value\n}); //when we refresh the page we will loose the user object stored in our redux store so we need to handle page reloads\n//handle page reloads\n\nif (localStorage.getItem('authToken')) {\n  //if the token is there then the user has logged in\n  store.dispatch(startSetUser());\n  store.dispatch(startSetCategories()); //categories must be first\n\n  store.dispatch(startSetNotes()); //notes has categories so we need to have store.dispatch(startSetCategories()) first\n}\n\nvar jsx = React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}));\nReactDOM.render(jsx, document.getElementById('root')); //we need to coonect our components to get access to the dispatch() method n we need to pass the <App/> inside our provider","map":{"version":3,"sources":["E:/LAVANYA-DCT-FINAL-PROJECTS21/new-updated_notesapp-master/client/src/index.js"],"names":["React","ReactDOM","App","configureStore","Provider","startSetUser","startSetCategories","startSetNotes","store","console","log","getState","subscribe","localStorage","getItem","dispatch","jsx","render","document","getElementById"],"mappings":";AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAAQC,kBAAR,QAAiC,4BAAjC;AACA,SAAQC,aAAR,QAA4B,uBAA5B,C,CAEA;;AACA,IAAMC,KAAK,GAACL,cAAc,EAA1B,C,CAEA;;AACAM,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,E,CAEA;;AACAH,KAAK,CAACI,SAAN,CAAgB,YAAI;AAChBH,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,EADgB,CACa;AAChC,CAFD,E,CAIA;AACA;;AACA,IAAGE,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAH,EAAqC;AACjC;AACDN,EAAAA,KAAK,CAACO,QAAN,CAAeV,YAAY,EAA3B;AAEAG,EAAAA,KAAK,CAACO,QAAN,CAAeT,kBAAkB,EAAjC,EAJkC,CAIE;;AACpCE,EAAAA,KAAK,CAACO,QAAN,CAAeR,aAAa,EAA5B,EALkC,CAKH;AAEjC;;AACD,IAAMS,GAAG,GACL,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAER,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFH,CADJ;AAOAP,QAAQ,CAACgB,MAAT,CAAgBD,GAAhB,EAAoBE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,E,CAEA","sourcesContent":["\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import App from './App'\n// import {Provider} from 'react-redux'\n// import configureStore from './store/configureStore'\n\n// import {startSetNotes} from './actions/notesAction'\n// import {startSetCategories} from './actions/categoriesAction'\n// import { startSetUser } from './actions/userAction'\n\n// const store=configureStore()\n// console.log(store.getState())\n\n// store.subscribe(() => {\n// console.log(store.getState())\n// })\n\n// if(localStorage.getItem('authToken')){\n// store.dispatch(startSetUser())\n\n// store.dispatch(startSetNotes())\n// store.dispatch(startSetCategories())\n// }\n    \n\n// const jsx=(<Provider store={store}>\n//     <App/>\n//     </Provider>\n// )\n// ReactDOM.render(jsx, document.getElementById('root'))\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport configureStore from './store/configureStore'\nimport {Provider} from 'react-redux'\nimport { startSetUser } from './actions/userAction';\nimport {startSetCategories} from './actions/categoriesAction'\nimport {startSetNotes} from './actions/notesAction'\n\n//calling or invoking configureStore() function\nconst store=configureStore()\n\n//to see the initial value of our store we do this\nconsole.log(store.getState())\n\n//subscribe method\nstore.subscribe(()=>{\n    console.log(store.getState())//now we have the paricular state value\n})\n\n//when we refresh the page we will loose the user object stored in our redux store so we need to handle page reloads\n//handle page reloads\nif(localStorage.getItem('authToken')){\n    //if the token is there then the user has logged in\n   store.dispatch(startSetUser())\n\n   store.dispatch(startSetCategories())//categories must be first\n   store.dispatch(startSetNotes())//notes has categories so we need to have store.dispatch(startSetCategories()) first\n   \n}\nconst jsx=(\n    <Provider store={store}>\n    {/* store is a property */}\n       <App/>\n    </Provider>\n)\n\nReactDOM.render(jsx,document.getElementById('root'))\n\n//we need to coonect our components to get access to the dispatch() method n we need to pass the <App/> inside our provider\n\n"]},"metadata":{},"sourceType":"module"}